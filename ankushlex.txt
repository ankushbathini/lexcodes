
HAMMING CODE:

#include<iostream>
 
using namespace std;
 
int main() {
    int data[10];
    int dataatrec[10],c,c1,c2,c3,i;
 
    cout<<"Enter 4 bits of data one by one\n";
    cin>>data[0];
    cin>>data[1];
    cin>>data[2];
    cin>>data[4];
 
    //Calculation of even parity
    data[6]=data[0]^data[2]^data[4];
data[5]=data[0]^data[1]^data[4];
data[3]=data[0]^data[1]^data[2];
 
cout<<"\nEncoded data is\n";
for(i=0;i<7;i++)
        cout<<data[i];
    
cout<<"\n\nEnter received data bits one by one\n";
    for(i=0;i<7;i++)
        cin>>dataatrec[i];
 
    c1=dataatrec[6]^dataatrec[4]^dataatrec[2]^dataatrec[0];
c2=dataatrec[5]^dataatrec[4]^dataatrec[1]^dataatrec[0];
c3=dataatrec[3]^dataatrec[2]^dataatrec[1]^dataatrec[0];
c=c3*4+c2*2+c1 ;
 
    if(c==0) {
cout<<"\nNo error while transmission of data\n";
    }
else {
cout<<"\nError on position "<<c;
cout<<"\nData sent : ";
for(i=0;i<7;i++)
         cout<<data[i];
        
cout<<"\nData received : ";
        for(i=0;i<7;i++)
         cout<<dataatrec[i];
        
cout<<"\nCorrect message is\n";
        
//if errorneous bit is 0 we complement it else vice versa
if(dataatrec[7-c]==0)
dataatrec[7-c]=1;
        else
dataatrec[7-c]=0;
for (i=0;i<7;i++) {
cout<<dataatrec[i];
}
}
return 0;
}

------------------------------------------------------

SELECTIVE REPEAT :
#include<bits/stdc++.h>
using namespace std; 
bool ack(){
  //acknowledged or not 
  return rand()%2;  
}

void solve(){
  int packets ; cin >> packets; 
  int window_size ; cin >> window_size;  
  int window_start = 1; 
  set<int>packets_to_be_transmitted; 

  while(window_start <= packets){
    for(int j = window_start ; j < window_start + window_size && j <= packets ; ++j){
      cout << "Sending packet No : " << j << "\n";
    }
    for(int j = window_start ; j < window_start + window_size && j <= packets ; ++j){
      if(ack()){
        cout << "Packet No : " << j << " acknowledged \n"; 
      }
      else{
        cout << "Failed to acknowledge packet : " << j << "\n"; 
        packets_to_be_transmitted.insert(j);  
      }
    }
    while(!packets_to_be_transmitted.empty()){
      auto f = packets_to_be_transmitted.begin();
      if(ack()){
        cout << "Packet No : " << *f << " acknowledged \n";   
        packets_to_be_transmitted.erase(f);     
      }
      else{
        cout << "Failed to acknowledge packet : " << *f << "\n"; 
      }
    }
    window_start+=window_size; 
  }
}

int main(){
solve();
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++

#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

int main() {
    srand(time(NULL));
    
    int totalFrames;
    cout << "Enter the total number of frames: ";
    cin >> totalFrames;
    
    int windowSize;
    cout << "Enter the window size: ";
    cin >> windowSize;
    
    int base = 1;
    int nextSeqNum = 1;
    int transmittedFrames = 0;
    
    while (transmittedFrames < totalFrames) {
        for (int i = base; i < base + windowSize && i <= totalFrames; i++) {
            cout << "Sending Frame " << i << "..." << endl;
        }
        
        int acknowledgement = rand() % 2; // Simulating random acknowledgement (0: Acknowledged, 1: Not Acknowledged)
        
        if (acknowledgement == 0) {
            int numAckedFrames = rand() % windowSize + 1; // Simulating random number of frames acknowledged
            cout << numAckedFrames << " frame(s) Acknowledged." << endl;
            
            transmittedFrames += numAckedFrames;
            base += numAckedFrames;
            nextSeqNum += numAckedFrames;
        } else {
            cout << "Frames Not Acknowledged. Retransmitting Window..." << endl;
        }
        
        cout << endl;
    }
    
    cout << "All frames have been transmitted and acknowledged." << endl;
    
    return 0;
}

-----------------------------------------------------------------------

GO BACK N ARQ:
import random
import time

num_frames = int(input("Enter the Total number of frames: "))
window_size = int(input("Enter the Window Size: "))
i = 1
total_frames_sent_resent = 0

while i <= num_frames:
    z = 0
    for k in range(i, min(i + window_size, num_frames + 1)):
        print("Sending Frame", k, "...")
        total_frames_sent_resent += 1
    for k in range(i, min(i + window_size, num_frames + 1)):
        rtime=random.randint(0,5)
        time.sleep(rtime)
        if(rtime<=4):
            print(f"Frame ", k, " recieved...")
            f = random.randint(0, 1)
            if f == 0:
                print("Acknowledgment for Frame", k, "recieved...")
                print()
                z += 1
            else:
                print("acknlowedgment frame ",k," Lost")
                print()
                break
        else:
            print("Timeout!! Frame Number:", k, "Lost")
            print("Retransmitting Window...")
            break
    print()
    i += z
print("Total number of frames which were sent and resent are:", total_frames_sent_resent)
++++++++++++++++++++++++++++
#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

int main() {
    srand(time(NULL));
    
    int totalFrames;
    cout << "Enter the total number of frames: ";
    cin >> totalFrames;
    
    int windowSize;
    cout << "Enter the window size: ";
    cin >> windowSize;
    
    int base = 1;
    int nextSeqNum = 1;
    
    while (base <= totalFrames) {
        for (int i = base; i < base + windowSize && i <= totalFrames; i++) {
            cout << "Sending Frame " << i << "..." << endl;
        }
        
        int acknowledgement = rand() % 2; // Simulating random acknowledgement (0: Acknowledged, 1: Not Acknowledged)
        
        if (acknowledgement == 0) {
            int numAckedFrames = rand() % windowSize + 1; // Simulating random number of frames acknowledged
            cout << numAckedFrames << " frame(s) Acknowledged." << endl;
            
            base += numAckedFrames;
            nextSeqNum = base;
        } else {
            cout << "Frames Not Acknowledged. Retransmitting Window..." << endl;
            nextSeqNum = base;
        }
        
        cout << endl;
    }
    
    cout << "All frames have been transmitted and acknowledged." << endl;
    
    return 0;
}



-------------------------------------------------------------------

STOP AND WAIT ARQ:


#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

int main() {
    srand(time(NULL));
    
    int totalFrames;
    cout << "Enter the total number of frames: ";
    cin >> totalFrames;
    
    int currentFrame = 1;
    int transmittedFrames = 0;
    
    while (transmittedFrames < totalFrames) {
        cout << "Sending Frame " << currentFrame << "..." << endl;
        
        int acknowledgement = rand() % 2; // Simulating random acknowledgement (0: Acknowledged, 1: Not Acknowledged)
        
        if (acknowledgement == 0) {
            cout << "Frame " << currentFrame << " Acknowledged." << endl;
            transmittedFrames++;
            currentFrame++;
        } else {
            cout << "Frame " << currentFrame << " Not Acknowledged. Retransmitting Frame..." << endl;
        }
        
        cout << endl;
    }
    
    cout << "All frames have been transmitted and acknowledged." << endl;
    
    return 0;
}




































































































































































































































































































































































































































































































































Lex Programs

1.	To count no. of vowels and consonants in the given input
%{
int vo,con;
%}
%%
[aeiouAEIOU] {vo++;}
[^aeiouAEIOU] {con++;}
%%
main()
{
yylex();
printf("Vowel count:%d, Consonent count:%d",vo,con);
}

2.	To count no of + and - operators in the given input expression
%{
int pc,nc;
%}
%%
[+] {pc++;}
[-] {nc++;}
%%
main()
{
yylex();
printf("Positive count:%d, Negative count:%d",pc,nc);
}

3.	To count number of characters, words, spaces and lines in the given file
%{
	int ch=0,bl=0,li=0,wr=0;
%}
%%
[\n]	{li++;wr++;}
[\t]	{bl++;wr++;}
[" "]	{bl++;wr++;}
[^\n\t] {ch++;}
%%
int main()
{
	FILE *fp;
	char file[10];
	printf("Enter file name: ");
	scanf("%s",file);
	fp=fopen(file,"r");
	yyin=fp;
	yylex();
	printf("cc=%d\nbc=%d\nlc=%d\nwc=%d\n",ch,bl,li,wr);
	return 0;
}



4.	To separate comment lines in the given program
%{
int com=0;
%}
%%
"/*"[^\n]+"*/" {com++;fprintf(yyout," ");}
%%
int main()
{
printf("Write a C program\n");
yyout=fopen("output","w");
yylex();
printf("Comment=%d\n",com);
return 0;
}

5.	a)  to check for the validity of expression

%{
#include<stdio.h>
int a=0,s=0,m=0,d=0,ob=0,cb=0;
int flaga=0,flags=0,flagm=0,flagd=0;
%}
id [a-zA-Z]+
%%
[id] {printf("%s is an identifier\n",yytext);}
[+] {a++;flaga=1;}
[-] {s++;flags=1;}
[*] {m++;flagm=1;}
[/] {d++;flagd=1;}
[(] {ob++;}
[)] {cb++;}
%%
int main()
{
printf("Enter exp\n");
yylex();
if(ob-cb==0)
{
printf("Valid expression\n");
}
else
{
printf("Invalid expression\n");
}
printf("Add=%d\nSub=%d\nMul=%d\nDiv=%d\n",a,s,m,d);
printf("Operators are: \n");
if(flaga)
{
printf("+\n");
}
if(flags)
{
printf("-\n");
}
if(flagm)
{
printf("*\n");
}
if(flagd)
{
printf("/\n");
}
return 0;
}

b)  to check for the validity of expression

%{
#include<stdio.h>
int a=0,s=0,m=0,d=0,ob=0,cb=0;
int flaga=0,flags=0,flagm=0,flagd=0;
%}
id [a-zA-Z]+
%%
[id] {printf("%s is an identifier\n",yytext);}
[+] {a++;flaga=1;}
[-] {s++;flags=1;}
[*] {m++;flagm=1;}
[/] {d++;flagd=1;}
[(] {ob++;}
[)] {cb++;}
%%
int main()
{
printf("Enter exp\n");
yylex();
if(ob-cb==0)
{
printf("Valid expression\n");
}
else
{
printf("Invalid expression\n");
}
printf("Add=%d\nSub=%d\nMul=%d\nDiv=%d\n",a,s,m,d);
printf("Operators are: \n");
if(flaga)
{
printf("+\n");
}
if(flags)
{
printf("-\n");
}
if(flagm)
{
printf("*\n");
}
if(flagd)
{
printf("/\n");
}
return 0;
}

6.	To check whether the given sentence is simple or complex
%{
int flag=0;
%}
%%
(" "[aA][nN][dD]" ")|(" "[oO][rR]" ")|(" "[bB][uU][tT]" ") {flag=1;}
%%
int main()
{
printf("Enter a sentence\n");
yylex();
if(flag==1)
{
printf("Compound statement\n");
}
else
{
printf("Simple statement\n");
}
return 0;
}

7.	To check valid identifiers and keywords in the given file and count the same
%{
#include<stdio.h>
int count=0;
%}
op [+-*/]
letter [a-zA-Z]
digit [0-9]
id {letter}*|({letter}{digit})+
notid ({digit}{letter})+
%%
[\t\n]+
("int")|("float")|("char")|("case")|("default")|("if")|("for")|("printf")|("scanf") {printf("%s is a keyword\n",yytext);}
{id} {printf("%s is an identifier\n",yytext);count++;}
{notid} {printf("%s is not an identifier\n",yytext);}
%%
int main()
{
FILE *fp;
char file[10];
printf("Enter file name\n");
scanf("%s",file);
fp=fopen(file,"r");
yyin=fp;
yylex();
printf("Total identifiers: %d\n",count);
return 0;
}


8.	Lex program to check if characters other than alphabets occur in a string
%{
  int len=0;
      %}
 
// Rules to identify if a character apart from alphabets
// occurs in a string
 
%%
[a-zA-Z]+ {printf("No character other than alphabets");}
 
/* here . will match any other character than alphabets
 because alphabets are already matched above
 * will matches 0 or more characters in front of it.
*/
 
.* {printf("character other than alphabets present"); }
%%
  
// code section
int yywrap() { }
   
int main()
 { 
  yylex();
  return 0;
           }

9.	Lex program to copy the content of one file to another file
/* LEX code to replace a word with another
   taking input from file */
   
/* Definition section */
/* character array line can be 
   accessed inside rule section and main() */
 
%{
#include<stdio.h>
#include<string.h>
char line[100];
 
%}
 
/* Rule Section */
/* Rule 1 writes the string stored in line
   character array to file output.txt */
/* Rule 2 copies the matched token
   i.e every character except newline character
    to line character array  */
 
%%
['\n']    { fprintf(yyout,"%s\n",line);}
(.*)      { strcpy(line,yytext); line[0] = '\0'; }
<<EOF>> { fprintf(yyout,"%s",line); return 0;}
%%
 
 
int yywrap()
{
    return 1;
}
 
/* code section */
int main()
{
        extern FILE *yyin, *yyout;
        /* open the source file
           in read mode */
    yyin=fopen("input.txt","r");
 
         
        /* open the output file
           in write mode */
    yyout=fopen("output.txt","w");
    yylex();
}

10.	Lex Program to check valid Mobile Number
  
%{
    /* Definition section */
%}
  
/* Rule Section */
%%
  
[1-9][0-9]{9} {printf("\nMobile Number Valid\n");}
  
.+ {printf("\nMobile Number Invalid\n");}
  
%%
  
// driver code 
int main() 
{
    printf("\nEnter Mobile Number : ");
    yylex();
    printf("\n");
    return 0;
}

11.	To count number of comments in the given input.

%
{
int com=0;
%}
%%
"/*"[^\n]+"*/" {com++;fprintf(yyout," ");}
%%
int main()
{
printf("Write a C program\n");
yyout=fopen("output","w");
yylex();
printf("Comment=%d\n",com);
return 0;
}

12.	To check and count number of identifiers in the given program

%{
#include<stdio.h>
int count=0;
%}
op [+-*/]
letter [a-zA-Z]
digit [0-9]
id {letter}*|({letter}{digit})+
notid ({digit}{letter})+
%%
[\t\n]+
("int")|("float")|("char")|("case")|("default")|("if")|("for")|("printf")|("scanf") {printf("%s is a   keyword\n",yytext);}
{id} {printf("%s is an identifier\n",yytext);count++;}
{notid} {printf("%s is not an identifier\n",yytext);}
%%
int main()
{
FILE *fp;
char file[10];
printf("Enter file name\n");
scanf("%s",file);
fp=fopen(file,"r");
yyin=fp;
yylex();
printf("Total identifiers: %d\n",count);
return 0;
}

















